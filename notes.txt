running a p5 app:

cd /Volumes/MUSIC/creativecodingII/particlesystem

to run a web server
http-server -c-1

point our browser to localhost:8080

open a terminal, navigate to your project

do this if added new files:
git add .

each time to make a new save or make changes:
git commit -am'commit message goes here'
git push

'commit message goes here' replaced with name of new save, should be useful information








just oscillating circles:

let oscSps = [];

function setup() {
  createCanvas (400, 400);
  for (var i = 0; i < 12; i++) {
    oscSps[i] = new oscSp(i);
  }

}


function draw() {
  background (0);
  translate (width/2, height/2);

  for (var i = 0; i < oscSps.length; i++) {
    oscSps[i].move();
    oscSps[i].display();
  }


}


class oscSp {
  constructor(whichSp) {
    this.whichSp = whichSp;
    this.oscx;
    this.oscy;
    this.dx;
    this.dy;
    this.oscspeed = 0;
    
    print (whichSp);

  }

  move() {
    if (this.whichSp == 0) {
      this.oscx = 100;
      this.oscy = 0;
    } else if (this.whichSp == 1) {
      this.oscx = (sqrt(3)/2)*100;
      this.oscy = (1/2)*-100;
    } else if (this.whichSp == 2) {
      this.oscx = (1/2)*100;
      this.oscy = (sqrt(3)/2)*-100;
    } else if (this.whichSp == 3) {
      this.oscx = 0;
      this.oscy = -100;
    } else if (this.whichSp == 4) {
      this.oscx = (-1/2)*100;
      this.oscy = (sqrt(3)/2)*-100;
    } else if (this.whichSp == 5) {
      this.oscx = (sqrt(3)/2)*-100;
      this.oscy = (1/2)*-100;
    } else if (this.whichSp == 6) {
      this.oscx = -100;
      this.oscy = 0;
    } else if (this.whichSp == 7) {
      this.oscx = (sqrt(3)/2)*-100;
      this.oscy = (1/2)*100;
    } else if (this.whichSp == 8) {
      this.oscx = (-1/2)*100;
      this.oscy = (sqrt(3)/2)*100;
    } else if (this.whichSp == 9) {
      this.oscx = 0;
      this.oscy = 100;
    } else if (this.whichSp == 10) {
      this.oscx = (1/2)*100;
      this.oscy = (sqrt(3)/2)*100;
    } else if (this.whichSp == 11) {
      this.oscx = (sqrt(3)/2)*100;
      this.oscy = (1/2)*100;
    }
    this.oscspeed += 0.05;
    this.dx = map(sin(this.oscspeed), -1, 1, 0, this.oscx);
    this.dy = map(sin(this.oscspeed), -1, 1, 0, this.oscy);
  }
  

  display() {
    noStroke ();
    ellipse (this.dx, this.dy, 10, 10);
  }


}









CodingTrain offset and sin oscillating:
// Daniel Shiffman
// http://codingtra.in
// http://patreon.com/codingtrain

// Video: https://youtu.be/H81Tdrmz2LA

// Original GIF: https://beesandbombs.tumblr.com/post/149654056864/cube-wave

let angle = 0;
let w = 24;
let ma;
let maxD;

function setup() {
  createCanvas(400, 400, WEBGL);
  ma = atan(cos(QUARTER_PI));
  maxD = dist(0, 0, 200, 200);
}

function draw() {
  background(100);
  ortho(-400, 400, 400, -400, 0, 1000);
  rotateX(-ma);
  rotateY(-QUARTER_PI);

  for (let z = 0; z < height; z += w) {
    for (let x = 0; x < width; x += w) {
      push();
      let d = dist(x, z, width / 2, height / 2);
      let offset = map(d, 0, maxD, -PI, PI);
      let a = angle + offset;
      let h = floor(map(sin(a), -1, 1, 100, 300));
      translate(x - width / 2, 0, z - height / 2);
      normalMaterial();
      box(w, h, w);
      //rect(x - width / 2 + w / 2, 0, w - 2, h);
      pop();
    }
  }

  angle -= 0.1;
}






fireworks sketch:
let particles = [];

function setup() {
  createCanvas(400, 400, WEBGL);
  angleMode(DEGREES);
}

function draw() {
  background(0);


  if (random(1) > 0.97) {
    for (var i = 0; i < 100; i++) {
      var p = new Particle();
      particles.push(p);
    }
  }

  for (var i = particles.length - 1; i >= 0; i--) {
    if (dist(particles[i].pos.x, particles[i].pos.y, particles[i].pos.z, 0, 0, 0) < 500) {
      particles[i].update();
      particles[i].show();
    } else {
      particles.splice(i, 1);
    }
  }
}


class Particle {
  constructor() {
    this.pos = createVector(0, 0, 0);
    this.vel = p5.Vector.random3D().normalize().mult(random(4,6));
  }
  update() {
    this.pos.add(this.vel);
  }
  show() {
    push();

    noStroke();
    fill(255);
    translate(this.pos.x, this.pos.y, this.pos.z);
    sphere(10);


    pop();
  }
}